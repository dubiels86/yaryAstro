---
import MainLayout from "@/layouts/MainLayout.astro";
---

<MainLayout>
  <section class="py-12 bg-gray-50 dark:bg-slate-900">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header con título y botón en línea -->
      <div class="flex items-center justify-between mt-8">
        <h1 class="text-xl font-bold text-gray-900 dark:text-white sm:text-5xl">
          Pacientes
        </h1>
        
        <!-- Botón mejorado para agregar nuevo paciente -->
        <button
          type="button"
          class="group inline-flex items-center justify-center rounded-full sm:rounded-lg px-3 py-3 sm:px-6 sm:py-3 text-sm font-bold text-neutral-50 bg-orange-400 hover:bg-orange-500 active:bg-orange-600 border border-transparent shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-gray-50 dark:focus:ring-offset-slate-900 disabled:pointer-events-none disabled:opacity-50 transform hover:scale-105 active:scale-95"
          id="addPatientBtn"
          aria-label="Agregar nuevo paciente"
          title="Agregar nuevo paciente"
        >
          <!-- Icono mejorado con animación -->
          <svg 
            class="h-5 w-5 transition-transform duration-300 group-hover:rotate-90" 
            xmlns="http://www.w3.org/2000/svg" 
            viewBox="0 0 20 20" 
            fill="currentColor"
            aria-hidden="true"
          >
            <path 
              fill-rule="evenodd" 
              d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" 
              clip-rule="evenodd" 
            />
          </svg>
          <span class="hidden sm:inline ml-2">Nuevo Paciente</span>
          
          <!-- Indicador de carga -->
          <svg 
            class="hidden h-4 w-4 animate-spin ml-2" 
            id="loadingSpinner"
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24"
            aria-hidden="true"
          >
            <circle 
              class="opacity-25" 
              cx="12" 
              cy="12" 
              r="10" 
              stroke="currentColor" 
              stroke-width="4"
            ></circle>
            <path 
              class="opacity-75" 
              fill="currentColor" 
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        </button>
      </div>

      <!-- Buscador de pacientes -->
      <div class="mt-6 flex flex-col sm:flex-row gap-4">
        <div class="flex-1 relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
            </svg>
          </div>
          <input
            type="text"
            id="searchInput"
            class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 dark:bg-slate-700 dark:text-white sm:text-sm"
            placeholder="Buscar pacientes por nombre, diagnóstico..."
            aria-label="Buscar pacientes"
          />
        </div>
        <div class="flex gap-2">
          <select
            id="filterField"
            class="block px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 dark:bg-slate-700 dark:text-white text-sm"
            aria-label="Campo de filtro"
          >
            <option value="all">Todos los campos</option>
            <option value="name">Nombre</option>
            <option value="diagnosis">Diagnóstico</option>
            <option value="age">Edad</option>
          </select>
          <button
            type="button"
            id="clearSearchBtn"
            class="inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-slate-700 hover:bg-gray-50 dark:hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-gray-50 dark:focus:ring-offset-slate-900 transition-colors duration-200"
            aria-label="Limpiar búsqueda"
            title="Limpiar búsqueda"
          >
            <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
        </div>
      </div>

      <!-- Contador de resultados -->
      <div class="mt-6 flex items-center justify-between">
        <div class="text-sm text-gray-700 dark:text-gray-300">
          <span id="resultsCount">0</span> paciente(s) encontrado(s)
        </div>
        <div class="text-sm text-gray-500 dark:text-gray-400">
          Total: <span id="totalCount">0</span> paciente(s)
        </div>
      </div>

      <!-- Tabla de pacientes -->
      <div class="mt-4 flex flex-col">
        <div class="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
          <div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
            <div class="shadow overflow-hidden border-b border-gray-200 dark:border-gray-700 sm:rounded-lg">
              <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-slate-800">
                  <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                      Nombre
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                      Edad
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                      Diagnóstico
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                      Última Cita
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody class="bg-white dark:bg-slate-900 divide-y divide-gray-200 dark:divide-gray-700" id="patientsTableBody">
                  <!-- Los datos se cargarán dinámicamente con JavaScript -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- Estado vacío -->
      <div id="emptyState" class="hidden mt-8 text-center">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No se encontraron pacientes</h3>
        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Intenta ajustar tu búsqueda o agregar un nuevo paciente.</p>
      </div>
    </div>
  </section>

  <!-- Modal para agregar/editar paciente -->
  <div id="patientModal" class="hidden fixed z-10 inset-0 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div class="inline-block align-bottom bg-white dark:bg-slate-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
        <form id="patientForm" class="p-6">
          <div>
            <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white" id="modal-title">
              Nuevo Paciente
            </h3>
            <div class="mt-4 space-y-4">
              <div>
                <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre Completo</label>
                <input type="text" name="name" id="name" class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-yellow-500 focus:ring-yellow-500 dark:bg-slate-700 dark:text-white sm:text-sm">
              </div>
              <div>
                <label for="age" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Edad</label>
                <input type="number" name="age" id="age" class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-yellow-500 focus:ring-yellow-500 dark:bg-slate-700 dark:text-white sm:text-sm">
              </div>
              <div>
                <label for="diagnosis" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Diagnóstico</label>
                <textarea name="diagnosis" id="diagnosis" rows="3" class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-yellow-500 focus:ring-yellow-500 dark:bg-slate-700 dark:text-white sm:text-sm"></textarea>
              </div>
              <div>
                <label for="lastVisit" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Prox. Cita</label>
                <input type="date" name="lastVisit" id="lastVisit" class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-yellow-500 focus:ring-yellow-500 dark:bg-slate-700 dark:text-white sm:text-sm">
              </div>
            </div>
          </div>
          <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
            <button
              type="submit"
              class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-yellow-500 text-base font-medium text-white hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 sm:col-start-2 sm:text-sm"
            >
              Guardar
            </button>
            <button
              type="button"
              class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-slate-700 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 sm:mt-0 sm:col-start-1 sm:text-sm"
              id="cancelBtn"
            >
              Cancelar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  // Datos de ejemplo
  let patients = [
    {
      id: 1,
      name: "María González",
      age: 45,
      diagnosis: "Diabetes Tipo 2",
      lastVisit: "2024-03-15"
    },
    {
      id: 2,
      name: "Juan Pérez",
      age: 38,
      diagnosis: "Hipotiroidismo",
      lastVisit: "2024-03-10"
    },
    {
      id: 3,
      name: "Ana Rodríguez",
      age: 52,
      diagnosis: "Hipertensión Arterial",
      lastVisit: "2024-03-20"
    },
    {
      id: 4,
      name: "Carlos López",
      age: 29,
      diagnosis: "Diabetes Tipo 1",
      lastVisit: "2024-03-12"
    },
    {
      id: 5,
      name: "Laura Martínez",
      age: 41,
      diagnosis: "Obesidad",
      lastVisit: "2024-03-18"
    },
    {
      id: 6,
      name: "Roberto Silva",
      age: 63,
      diagnosis: "Diabetes Tipo 2",
      lastVisit: "2024-03-08"
    }
  ];

  // Variable para controlar si estamos editando o creando
  let editingPatientId: number | null = null;

  // Elementos del DOM
  const modal = document.getElementById('patientModal');
  const addPatientBtn = document.getElementById('addPatientBtn') as HTMLButtonElement;
  const cancelBtn = document.getElementById('cancelBtn');
  const patientForm = document.getElementById('patientForm') as HTMLFormElement;
  const tableBody = document.getElementById('patientsTableBody');
  const loadingSpinner = document.getElementById('loadingSpinner');
  const searchInput = document.getElementById('searchInput') as HTMLInputElement;
  const filterField = document.getElementById('filterField') as HTMLSelectElement;
  const clearSearchBtn = document.getElementById('clearSearchBtn');
  const resultsCount = document.getElementById('resultsCount');
  const totalCount = document.getElementById('totalCount');
  const emptyState = document.getElementById('emptyState');

  // Funciones
  function renderPatients(patientsToRender = patients) {
    if (!tableBody) return;
    
    // Actualizar contadores
    if (resultsCount) {
      resultsCount.textContent = patientsToRender.length.toString();
    }
    if (totalCount) {
      totalCount.textContent = patients.length.toString();
    }
    
    // Mostrar/ocultar estado vacío
    if (emptyState) {
      if (patientsToRender.length === 0) {
        emptyState.classList.remove('hidden');
        tableBody.innerHTML = '';
        return;
      } else {
        emptyState.classList.add('hidden');
      }
    }
    
    tableBody.innerHTML = patientsToRender.map(patient => `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
          ${patient.name}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
          ${patient.age}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
          ${patient.diagnosis}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
          ${patient.lastVisit}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <button 
            data-patient-id="${patient.id}"
            data-action="edit"
            class="inline-flex items-center justify-center p-2 text-yellow-500 hover:text-yellow-600 hover:bg-yellow-50 dark:hover:bg-yellow-900/20 rounded-lg transition-colors duration-200 mr-2"
            aria-label="Editar paciente ${patient.name}"
            title="Editar paciente"
          >
            <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
            </svg>
          </button>
          <button 
            data-patient-id="${patient.id}"
            data-action="delete"
            class="inline-flex items-center justify-center p-2 text-red-500 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors duration-200"
            aria-label="Eliminar paciente ${patient.name}"
            title="Eliminar paciente"
          >
            <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
          </button>
        </td>
      </tr>
    `).join('');
    
    // Agregar event listeners a los botones después de renderizar
    addTableEventListeners();
  }

  function showModal(isEditing = false) {
    if (!modal) return;
    
    // Mostrar estado de carga
    if (addPatientBtn && loadingSpinner) {
      addPatientBtn.disabled = true;
      loadingSpinner.classList.remove('hidden');
      addPatientBtn.querySelector('span')?.classList.add('hidden');
    }
    
    // Simular carga (en una aplicación real, esto sería una llamada a la API)
    setTimeout(() => {
      modal.classList.remove('hidden');
      
      // Ocultar estado de carga
      if (addPatientBtn && loadingSpinner) {
        addPatientBtn.disabled = false;
        loadingSpinner.classList.add('hidden');
        addPatientBtn.querySelector('span')?.classList.remove('hidden');
      }
    }, 500);
  }

  function hideModal() {
    if (!modal || !patientForm) return;
    modal.classList.add('hidden');
    patientForm.reset();
    editingPatientId = null;
    
    // Restaurar título del modal
    const modalTitle = document.getElementById('modal-title');
    if (modalTitle) {
      modalTitle.textContent = 'Nuevo Paciente';
    }
    
    // Restaurar texto del botón de guardar
    const submitBtn = patientForm.querySelector('button[type="submit"]') as HTMLButtonElement;
    if (submitBtn) {
      submitBtn.textContent = 'Guardar';
    }
  }

  function addPatient(e: Event) {
    e.preventDefault();
    if (!patientForm) return;
    
    // Mostrar estado de carga en el botón de guardar
    const submitBtn = patientForm.querySelector('button[type="submit"]') as HTMLButtonElement;
    const originalText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.innerHTML = `
      <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      ${editingPatientId ? 'Actualizando...' : 'Guardando...'}
    `;
    
    // Simular procesamiento (en una aplicación real, esto sería una llamada a la API)
    setTimeout(() => {
      const formData = new FormData(patientForm);
      
      if (editingPatientId) {
        // Actualizar paciente existente
        const patientIndex = patients.findIndex(p => p.id === editingPatientId);
        if (patientIndex !== -1) {
          patients[patientIndex] = {
            ...patients[patientIndex],
            name: formData.get('name') as string,
            age: parseInt(formData.get('age') as string),
            diagnosis: formData.get('diagnosis') as string,
            lastVisit: formData.get('lastVisit') as string
          };
          showNotification('Paciente actualizado exitosamente', 'success');
        }
      } else {
        // Crear nuevo paciente
        const newPatient = {
          id: patients.length + 1,
          name: formData.get('name') as string,
          age: parseInt(formData.get('age') as string),
          diagnosis: formData.get('diagnosis') as string,
          lastVisit: formData.get('lastVisit') as string
        };
        patients.push(newPatient);
        showNotification('Paciente agregado exitosamente', 'success');
      }
      
      renderPatients();
      hideModal();
      
      // Restaurar botón
      submitBtn.disabled = false;
      submitBtn.textContent = originalText;
    }, 1000);
  }

  function editPatient(id: number) {
    const patient = patients.find(p => p.id === id);
    if (!patient) return;
    
    // Establecer el ID del paciente que se está editando
    editingPatientId = id;
    
    const nameInput = document.getElementById('name') as HTMLInputElement;
    const ageInput = document.getElementById('age') as HTMLInputElement;
    const diagnosisInput = document.getElementById('diagnosis') as HTMLTextAreaElement;
    const lastVisitInput = document.getElementById('lastVisit') as HTMLInputElement;
    const modalTitle = document.getElementById('modal-title');
    const submitBtn = document.querySelector('#patientForm button[type="submit"]') as HTMLButtonElement;

    if (nameInput && ageInput && diagnosisInput && lastVisitInput) {
      // Cargar datos del paciente
      nameInput.value = patient.name;
      ageInput.value = patient.age.toString();
      diagnosisInput.value = patient.diagnosis;
      lastVisitInput.value = patient.lastVisit;
      
      // Cambiar título del modal
      if (modalTitle) {
        modalTitle.textContent = 'Editar Paciente';
      }
      
      // Cambiar texto del botón
      if (submitBtn) {
        submitBtn.textContent = 'Actualizar';
      }
      
      showModal(true);
    }
  }

  function showNotification(message: string, type: 'success' | 'error' = 'success') {
    // Crear elemento de notificación
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full ${
      type === 'success' 
        ? 'bg-green-500 text-white' 
        : 'bg-red-500 text-white'
    }`;
    notification.innerHTML = `
      <div class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
          ${type === 'success' 
            ? '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />'
            : '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />'
          }
        </svg>
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // Animar entrada
    setTimeout(() => {
      notification.classList.remove('translate-x-full');
    }, 100);
    
    // Auto-remover después de 3 segundos
    setTimeout(() => {
      notification.classList.add('translate-x-full');
      setTimeout(() => {
        document.body.removeChild(notification);
      }, 300);
    }, 3000);
  }

  function addTableEventListeners() {
    // Event listeners para botones de editar
    const editButtons = tableBody?.querySelectorAll('[data-action="edit"]');
    editButtons?.forEach(button => {
      button.addEventListener('click', (e) => {
        const patientId = parseInt((e.currentTarget as HTMLElement).getAttribute('data-patient-id') || '0');
        if (patientId) {
          editPatient(patientId);
        }
      });
    });

    // Event listeners para botones de eliminar
    const deleteButtons = tableBody?.querySelectorAll('[data-action="delete"]');
    deleteButtons?.forEach(button => {
      button.addEventListener('click', (e) => {
        const patientId = parseInt((e.currentTarget as HTMLElement).getAttribute('data-patient-id') || '0');
        if (patientId) {
          deletePatient(patientId);
        }
      });
    });
  }

  function searchPatients() {
    const searchTerm = searchInput?.value.toLowerCase().trim() || '';
    const filterBy = filterField?.value || 'all';
    
    if (!searchTerm) {
      renderPatients(patients);
      return;
    }
    
    const filteredPatients = patients.filter(patient => {
      switch (filterBy) {
        case 'name':
          return patient.name.toLowerCase().includes(searchTerm);
        case 'diagnosis':
          return patient.diagnosis.toLowerCase().includes(searchTerm);
        case 'age':
          return patient.age.toString().includes(searchTerm);
        case 'all':
        default:
          return (
            patient.name.toLowerCase().includes(searchTerm) ||
            patient.diagnosis.toLowerCase().includes(searchTerm) ||
            patient.age.toString().includes(searchTerm) ||
            patient.lastVisit.includes(searchTerm)
          );
      }
    });
    
    renderPatients(filteredPatients);
  }

  function clearSearch() {
    if (searchInput) {
      searchInput.value = '';
    }
    if (filterField) {
      filterField.value = 'all';
    }
    renderPatients(patients);
  }

  function deletePatient(id: number) {
    if (confirm('¿Está seguro de eliminar este paciente?')) {
      patients = patients.filter(p => p.id !== id);
      renderPatients();
      showNotification('Paciente eliminado exitosamente', 'success');
    }
  }

  // Event Listeners
  if (addPatientBtn) {
    addPatientBtn.addEventListener('click', () => showModal());
  }
  if (cancelBtn) {
    cancelBtn.addEventListener('click', hideModal);
  }
  if (patientForm) {
    patientForm.addEventListener('submit', addPatient);
  }
  
  // Event listeners para el buscador
  if (searchInput) {
    searchInput.addEventListener('input', searchPatients);
  }
  if (filterField) {
    filterField.addEventListener('change', searchPatients);
  }
  if (clearSearchBtn) {
    clearSearchBtn.addEventListener('click', clearSearch);
  }
  
  // Soporte para teclado
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal?.classList.contains('hidden')) {
      hideModal();
    }
  });
  
  // Cerrar modal al hacer clic fuera
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      hideModal();
    }
  });

  // Renderizar pacientes iniciales
  renderPatients();
</script> 