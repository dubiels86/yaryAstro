---
import MainLayout from "@/layouts/MainLayout.astro";
---

<MainLayout>
  <section class="py-12 bg-gray-50 dark:bg-slate-900">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="flex items-center justify-between">
        <h1 class="text-xl font-bold text-gray-900 dark:text-white sm:text-5xl">
          Consultas
        </h1>
        
        <!-- Botón nueva consulta -->
        <button
          type="button"
          class="group inline-flex items-center justify-center rounded-full sm:rounded-lg px-3 py-3 sm:px-6 sm:py-3 text-sm font-bold text-neutral-50 bg-orange-400 hover:bg-orange-500 active:bg-orange-600 border border-transparent shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-gray-50 dark:focus:ring-offset-slate-900 disabled:pointer-events-none disabled:opacity-50 transform hover:scale-105 active:scale-95"
          id="newConsultationBtn"
          aria-label="Nueva consulta"
          title="Nueva consulta"
        >
          <svg 
            class="h-5 w-5 transition-transform duration-300 group-hover:rotate-90" 
            xmlns="http://www.w3.org/2000/svg" 
            viewBox="0 0 20 20" 
            fill="currentColor"
            aria-hidden="true"
          >
            <path 
              fill-rule="evenodd" 
              d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" 
              clip-rule="evenodd" 
            />
          </svg>
          <span class="hidden sm:inline ml-2">Nueva Consulta</span>
        </button>
      </div>

      <!-- Lista de consultas recientes -->
      <div class="mt-8">
        <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          Consultas Recientes
        </h2>
        <div class="bg-white dark:bg-slate-800 shadow overflow-hidden sm:rounded-md max-h-96 overflow-y-auto">
          <ul id="consultationsList" class="divide-y divide-gray-200 dark:divide-gray-700">
            <!-- Las consultas se cargarán dinámicamente -->
          </ul>
        </div>
      </div>
    </div>
  </section>

  <!-- Modal para nueva consulta -->
  <div id="consultationModal" class="hidden fixed z-10 inset-0 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="modal-container">
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
      <div class="modal-content bg-white dark:bg-slate-800 rounded-xl shadow-xl max-w-4xl w-full flex flex-col transform transition-all">
        <form id="consultationForm" class="p-6 overflow-y-auto flex-1">
          <div>
            <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white" id="modal-title">
              Nueva Consulta
            </h3>
            
            <!-- Selección de paciente -->
            <div class="mt-4">
              <label for="patientSelect" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Seleccionar Paciente
              </label>
              <select 
                id="patientSelect" 
                name="patientId"
                class="mt-1 block w-full rounded-xl border-gray-300 dark:border-gray-600 shadow-sm focus:border-orange-500 focus:ring-orange-500 dark:bg-slate-700 dark:text-white sm:text-sm"
                required
              >
                <option value="">Selecciona un paciente...</option>
              </select>
            </div>

            <!-- Información del paciente seleccionado -->
            <div id="patientInfo" class="hidden mt-4 p-4 bg-gray-50 dark:bg-slate-700 rounded-xl">
              <h4 class="text-sm font-medium text-gray-900 dark:text-white mb-2">Información del Paciente</h4>
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
                <div>
                  <span class="font-medium text-gray-700 dark:text-gray-300">Nombre:</span>
                  <span id="patientName" class="ml-2 text-gray-900 dark:text-white"></span>
                </div>
                <div>
                  <span class="font-medium text-gray-700 dark:text-gray-300">Edad:</span>
                  <span id="patientAge" class="ml-2 text-gray-900 dark:text-white"></span>
                </div>
                <div>
                  <span class="font-medium text-gray-700 dark:text-gray-300">Diagnóstico:</span>
                  <span id="patientDiagnosis" class="ml-2 text-gray-900 dark:text-white"></span>
                </div>
                <div>
                  <span class="font-medium text-gray-700 dark:text-gray-300">Última cita:</span>
                  <span id="patientLastVisit" class="ml-2 text-gray-900 dark:text-white"></span>
                </div>
              </div>
            </div>

            <!-- Historia clínica -->
            <div id="medicalHistory" class="hidden mt-6">
              <h4 class="text-sm font-medium text-gray-900 dark:text-white mb-3">Historia Clínica</h4>
              <div id="historyContent" class="max-h-48 overflow-y-auto bg-gray-50 dark:bg-slate-700 rounded-xl p-3 text-sm scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-gray-100 dark:scrollbar-track-gray-800">
                <!-- La historia se cargará dinámicamente -->
              </div>
            </div>

            <!-- Formulario de consulta -->
            <div class="mt-6 space-y-4">
              <div>
                <label for="consultationDate" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Fecha de Consulta
                </label>
                <input 
                  type="date" 
                  name="consultationDate" 
                  id="consultationDate"
                  class="mt-1 block w-full rounded-xl border-gray-300 dark:border-gray-600 shadow-sm focus:border-orange-500 focus:ring-orange-500 dark:bg-slate-700 dark:text-white sm:text-sm"
                  required
                >
              </div>

              <div>
                <label for="symptoms" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Síntomas Presentados
                </label>
                <textarea 
                  name="symptoms" 
                  id="symptoms" 
                  rows="3"
                  class="mt-1 block w-full rounded-xl border-gray-300 dark:border-gray-600 shadow-sm focus:border-orange-500 focus:ring-orange-500 dark:bg-slate-700 dark:text-white sm:text-sm"
                  placeholder="Describa los síntomas del paciente..."
                  required
                ></textarea>
              </div>

              <div>
                <label for="examination" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Examen Físico
                </label>
                <textarea 
                  name="examination" 
                  id="examination" 
                  rows="3"
                  class="mt-1 block w-full rounded-xl border-gray-300 dark:border-gray-600 shadow-sm focus:border-orange-500 focus:ring-orange-500 dark:bg-slate-700 dark:text-white sm:text-sm"
                  placeholder="Resultados del examen físico..."
                  required
                ></textarea>
              </div>

              <div>
                <label for="diagnosis" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Diagnóstico
                </label>
                <textarea 
                  name="diagnosis" 
                  id="diagnosis" 
                  rows="2"
                  class="mt-1 block w-full rounded-xl border-gray-300 dark:border-gray-600 shadow-sm focus:border-orange-500 focus:ring-orange-500 dark:bg-slate-700 dark:text-white sm:text-sm"
                  placeholder="Diagnóstico actual..."
                  required
                ></textarea>
              </div>

              <div>
                <label for="treatment" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Tratamiento
                </label>
                <textarea 
                  name="treatment" 
                  id="treatment" 
                  rows="3"
                  class="mt-1 block w-full rounded-xl border-gray-300 dark:border-gray-600 shadow-sm focus:border-orange-500 focus:ring-orange-500 dark:bg-slate-700 dark:text-white sm:text-sm"
                  placeholder="Tratamiento prescrito..."
                  required
                ></textarea>
              </div>

              <div>
                <label for="nextVisit" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Próxima Cita
                </label>
                <input 
                  type="date" 
                  name="nextVisit" 
                  id="nextVisit"
                  class="mt-1 block w-full rounded-xl border-gray-300 dark:border-gray-600 shadow-sm focus:border-orange-500 focus:ring-orange-500 dark:bg-slate-700 dark:text-white sm:text-sm"
                  required
                >
              </div>

              <div>
                <label for="notes" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Notas Adicionales
                </label>
                <textarea 
                  name="notes" 
                  id="notes" 
                  rows="2"
                  class="mt-1 block w-full rounded-xl border-gray-300 dark:border-gray-600 shadow-sm focus:border-orange-500 focus:ring-orange-500 dark:bg-slate-700 dark:text-white sm:text-sm"
                  placeholder="Notas adicionales..."
                ></textarea>
              </div>
            </div>
          </div>
          
          <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
            <button
              type="submit"
              class="w-full inline-flex justify-center rounded-xl border border-transparent shadow-sm px-4 py-2 bg-orange-500 text-base font-medium text-white hover:bg-orange-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 sm:col-start-2 sm:text-sm transition-colors duration-200"
            >
              Guardar Consulta
            </button>
            <button
              type="button"
              class="mt-3 w-full inline-flex justify-center rounded-xl border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-slate-700 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 sm:mt-0 sm:col-start-1 sm:text-sm transition-colors duration-200"
              id="cancelConsultationBtn"
            >
              Cancelar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</MainLayout>

<style>
  /* Estilos personalizados para scroll */
  .scrollbar-thin::-webkit-scrollbar {
    width: 6px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }
  
  /* Dark mode scrollbar */
  .dark .scrollbar-thin::-webkit-scrollbar-track {
    background: #334155;
  }
  
  .dark .scrollbar-thin::-webkit-scrollbar-thumb {
    background: #64748b;
  }
  
  .dark .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }
  
  /* Firefox scrollbar */
  .scrollbar-thin {
    scrollbar-width: thin;
    scrollbar-color: #cbd5e1 #f1f5f9;
  }
  
  .dark .scrollbar-thin {
    scrollbar-color: #64748b #334155;
  }
  
  /* Prevenir scroll del body cuando el modal está abierto */
  body.modal-open {
    overflow: hidden;
  }
  
  /* Asegurar centrado perfecto del modal */
  .modal-container {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    padding: 1rem;
  }
  
  .modal-content {
    position: relative;
    z-index: 10;
    max-height: 90vh;
    overflow-y: auto;
  }
  
  /* Mejorar responsive en móviles */
  @media (max-width: 640px) {
    .modal-container {
      padding: 0.5rem;
    }
    
    .modal-content {
      max-height: 95vh;
      margin: 0.5rem;
    }
  }
</style>

<script>
  // Datos de ejemplo de pacientes (importados desde el módulo de pacientes)
  let patients = [
    {
      id: 1,
      name: "María González",
      age: 45,
      diagnosis: "Diabetes Tipo 2",
      lastVisit: "2024-03-15"
    },
    {
      id: 2,
      name: "Juan Pérez",
      age: 38,
      diagnosis: "Hipotiroidismo",
      lastVisit: "2024-03-10"
    },
    {
      id: 3,
      name: "Ana Rodríguez",
      age: 52,
      diagnosis: "Hipertensión Arterial",
      lastVisit: "2024-03-20"
    },
    {
      id: 4,
      name: "Carlos López",
      age: 29,
      diagnosis: "Diabetes Tipo 1",
      lastVisit: "2024-03-12"
    },
    {
      id: 5,
      name: "Laura Martínez",
      age: 41,
      diagnosis: "Obesidad",
      lastVisit: "2024-03-18"
    },
    {
      id: 6,
      name: "Roberto Silva",
      age: 63,
      diagnosis: "Diabetes Tipo 2",
      lastVisit: "2024-03-08"
    }
  ];

  // Datos de ejemplo de consultas
  let consultations = [
    {
      id: 1,
      patientId: 1,
      patientName: "María González",
      date: "2024-03-15",
      symptoms: "Fatiga, sed excesiva, visión borrosa",
      examination: "Peso: 75kg, TA: 140/90, Glucemia: 180mg/dl",
      diagnosis: "Diabetes Tipo 2 descompensada",
      treatment: "Metformina 850mg 2x día, dieta baja en carbohidratos",
      nextVisit: "2024-04-15",
      notes: "Paciente refiere mejoría con el tratamiento anterior"
    },
    {
      id: 2,
      patientId: 2,
      patientName: "Juan Pérez",
      date: "2024-03-10",
      symptoms: "Cansancio, aumento de peso, intolerancia al frío",
      examination: "Peso: 82kg, TA: 120/80, TSH: 8.5 mUI/L",
      diagnosis: "Hipotiroidismo compensado",
      treatment: "Levotiroxina 50mcg 1x día",
      nextVisit: "2024-04-10",
      notes: "Control de TSH en 4 semanas"
    }
  ];

  // Historia clínica de ejemplo
  let medicalHistory = {
    1: [
      {
        date: "2024-02-15",
        diagnosis: "Diabetes Tipo 2",
        treatment: "Metformina 500mg 2x día",
        notes: "Primera consulta, diagnóstico inicial"
      },
      {
        date: "2024-01-20",
        diagnosis: "Hipertensión arterial",
        treatment: "Enalapril 10mg 1x día",
        notes: "Control de presión arterial"
      }
    ],
    2: [
      {
        date: "2024-02-10",
        diagnosis: "Hipotiroidismo",
        treatment: "Levotiroxina 25mcg 1x día",
        notes: "Diagnóstico inicial, TSH elevada"
      }
    ]
  };

  // Elementos del DOM
  const consultationModal = document.getElementById('consultationModal');
  const newConsultationBtn = document.getElementById('newConsultationBtn');
  const cancelConsultationBtn = document.getElementById('cancelConsultationBtn');
  const consultationForm = document.getElementById('consultationForm') as HTMLFormElement;
  const patientSelect = document.getElementById('patientSelect') as HTMLSelectElement;
  const patientInfo = document.getElementById('patientInfo');
  const medicalHistoryDiv = document.getElementById('medicalHistory');
  const consultationsList = document.getElementById('consultationsList');

  // Funciones
  function renderConsultations() {
    if (!consultationsList) {
      console.warn('consultationsList element not found');
      return;
    }
    
    consultationsList.innerHTML = consultations.map(consultation => `
      <li class="px-6 py-4 hover:bg-gray-50 dark:hover:bg-slate-700 transition-colors duration-200">
        <div class="flex items-center justify-between">
          <div class="flex-1">
            <div class="flex items-center justify-between">
              <p class="text-sm font-medium text-gray-900 dark:text-white">
                ${consultation.patientName}
              </p>
              <p class="text-sm text-gray-500 dark:text-gray-400">
                ${consultation.date}
              </p>
            </div>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
              ${consultation.diagnosis}
            </p>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
              Próxima cita: ${consultation.nextVisit}
            </p>
          </div>
          <div class="ml-4 flex-shrink-0">
            <button
              data-consultation-id="${consultation.id}"
              data-action="view"
              class="inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md text-orange-700 bg-orange-100 hover:bg-orange-200 dark:text-orange-300 dark:bg-orange-900/20 dark:hover:bg-orange-900/30 transition-colors duration-200"
            >
              Ver Detalles
            </button>
          </div>
        </div>
      </li>
    `).join('');
    
    // Agregar event listeners a los botones después de renderizar
    addConsultationEventListeners();
  }

  function populatePatientSelect() {
    if (!patientSelect) {
      console.warn('patientSelect element not found');
      return;
    }
    
    patientSelect.innerHTML = '<option value="">Selecciona un paciente...</option>' +
      patients.map(patient => 
        `<option value="${patient.id}">${patient.name} - ${patient.diagnosis}</option>`
      ).join('');
  }

  function showPatientInfo(patientId: number) {
    const patient = patients.find(p => p.id === patientId);
    if (!patient || !patientInfo) return;

    // Mostrar información del paciente
    const patientName = document.getElementById('patientName');
    const patientAge = document.getElementById('patientAge');
    const patientDiagnosis = document.getElementById('patientDiagnosis');
    const patientLastVisit = document.getElementById('patientLastVisit');

    if (patientName) patientName.textContent = patient.name;
    if (patientAge) patientAge.textContent = patient.age.toString();
    if (patientDiagnosis) patientDiagnosis.textContent = patient.diagnosis;
    if (patientLastVisit) patientLastVisit.textContent = patient.lastVisit;

    patientInfo.classList.remove('hidden');

    // Mostrar historia clínica
    showMedicalHistory(patientId);
  }

  function showMedicalHistory(patientId: number) {
    if (!medicalHistoryDiv) return;

    const history = medicalHistory[patientId as keyof typeof medicalHistory] || [];
    const historyContent = document.getElementById('historyContent');

    if (historyContent) {
      if (history.length === 0) {
        historyContent.innerHTML = '<p class="text-gray-500 dark:text-gray-400">No hay historia clínica previa</p>';
      } else {
        historyContent.innerHTML = history.map(entry => `
          <div class="mb-3 p-2 bg-white dark:bg-slate-600 rounded-xl border-l-4 border-orange-500">
            <div class="flex justify-between items-start">
              <span class="text-xs font-medium text-gray-700 dark:text-gray-300">${entry.date}</span>
            </div>
            <p class="text-sm font-medium text-gray-900 dark:text-white mt-1">${entry.diagnosis}</p>
            <p class="text-xs text-gray-600 dark:text-gray-400 mt-1">${entry.treatment}</p>
            ${entry.notes ? `<p class="text-xs text-gray-500 dark:text-gray-400 mt-1">${entry.notes}</p>` : ''}
          </div>
        `).join('');
      }
    }

    medicalHistoryDiv.classList.remove('hidden');
  }

  function showModal() {
    if (!consultationModal) {
      console.warn('consultationModal element not found');
      return;
    }
    if (!consultationForm) {
      console.warn('consultationForm element not found');
      return;
    }
    
    // Limpiar formulario antes de abrir
    consultationForm.reset();
    
    // Ocultar información del paciente
    if (patientInfo) patientInfo.classList.add('hidden');
    if (medicalHistoryDiv) medicalHistoryDiv.classList.add('hidden');
    
    consultationModal.classList.remove('hidden');
    
    // Prevenir scroll del body
    document.body.classList.add('modal-open');
    
    // Establecer fecha actual
    const today = new Date().toISOString().split('T')[0];
    const consultationDate = document.getElementById('consultationDate') as HTMLInputElement;
    if (consultationDate) {
      consultationDate.value = today;
    }
    
    // Hacer scroll al inicio del modal
    setTimeout(() => {
      const form = document.getElementById('consultationForm');
      if (form) {
        form.scrollTop = 0;
      }
    }, 100);
    
    // Enfocar el primer campo
    setTimeout(() => {
      const patientSelect = document.getElementById('patientSelect') as HTMLSelectElement;
      if (patientSelect) {
        patientSelect.focus();
      }
    }, 200);
  }

  function hideModal() {
    if (!consultationModal) {
      console.warn('consultationModal element not found');
      return;
    }
    if (!consultationForm) {
      console.warn('consultationForm element not found');
      return;
    }
    
    consultationModal.classList.add('hidden');
    consultationForm.reset();
    
    // Restaurar scroll del body
    document.body.classList.remove('modal-open');
    
    // Ocultar información del paciente
    if (patientInfo) patientInfo.classList.add('hidden');
    if (medicalHistoryDiv) medicalHistoryDiv.classList.add('hidden');
  }

  function saveConsultation(e: Event) {
    e.preventDefault();
    if (!consultationForm) {
      console.error('Formulario no encontrado');
      return;
    }

    // Obtener el botón de submit y mostrar estado de carga
    const submitBtn = consultationForm.querySelector('button[type="submit"]') as HTMLButtonElement;
    const originalText = submitBtn?.textContent || 'Guardar Consulta';
    
    if (submitBtn) {
      submitBtn.disabled = true;
      submitBtn.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Guardando...
      `;
    }

    try {
      const formData = new FormData(consultationForm);
      
      // Validar campos requeridos
      const patientId = parseInt(formData.get('patientId') as string);
      const consultationDate = formData.get('consultationDate') as string;
      const symptoms = formData.get('symptoms') as string;
      const examination = formData.get('examination') as string;
      const diagnosis = formData.get('diagnosis') as string;
      const treatment = formData.get('treatment') as string;
      const nextVisit = formData.get('nextVisit') as string;

      // Validaciones
      if (!patientId) {
        throw new Error('Por favor selecciona un paciente');
      }

      if (!consultationDate) {
        throw new Error('Por favor ingresa la fecha de consulta');
      }

      if (!symptoms || symptoms.trim() === '') {
        throw new Error('Por favor describe los síntomas');
      }

      if (!examination || examination.trim() === '') {
        throw new Error('Por favor ingresa los resultados del examen físico');
      }

      if (!diagnosis || diagnosis.trim() === '') {
        throw new Error('Por favor ingresa el diagnóstico');
      }

      if (!treatment || treatment.trim() === '') {
        throw new Error('Por favor ingresa el tratamiento');
      }

      if (!nextVisit) {
        throw new Error('Por favor ingresa la fecha de la próxima cita');
      }

      const patient = patients.find(p => p.id === patientId);
      if (!patient) {
        throw new Error('Paciente no encontrado');
      }

      // Crear la nueva consulta
      const newConsultation = {
        id: consultations.length + 1,
        patientId: patientId,
        patientName: patient.name,
        date: consultationDate,
        symptoms: symptoms.trim(),
        examination: examination.trim(),
        diagnosis: diagnosis.trim(),
        treatment: treatment.trim(),
        nextVisit: nextVisit,
        notes: (formData.get('notes') as string || '').trim()
      };

      // Simular procesamiento (en una aplicación real, esto sería una llamada a la API)
      setTimeout(() => {
        try {
          consultations.push(newConsultation);

          // Actualizar la historia clínica del paciente
          if (!medicalHistory[patientId as keyof typeof medicalHistory]) {
            medicalHistory[patientId as keyof typeof medicalHistory] = [];
          }
          
          medicalHistory[patientId as keyof typeof medicalHistory].push({
            date: newConsultation.date,
            diagnosis: newConsultation.diagnosis,
            treatment: newConsultation.treatment,
            notes: newConsultation.notes
          });

          // Actualizar la última visita del paciente
          patient.lastVisit = newConsultation.date;

          renderConsultations();
          hideModal();
          
          // Mostrar notificación de éxito
          showNotification('Consulta guardada exitosamente', 'success');
        } catch (error) {
          console.error('Error al guardar la consulta:', error);
          showNotification('Error al guardar la consulta', 'error');
        } finally {
          // Restaurar botón
          if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
          }
        }
      }, 1000);

    } catch (error) {
      console.error('Error de validación:', error);
      
      // Mostrar error al usuario
      showNotification(error instanceof Error ? error.message : 'Error al guardar la consulta', 'error');
      
      // Restaurar botón
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
    }
  }

  function addConsultationEventListeners() {
    if (!consultationsList) {
      console.warn('consultationsList element not found for event listeners');
      return;
    }
    
    // Event listeners para botones de ver detalles
    const viewButtons = consultationsList.querySelectorAll('[data-action="view"]');
    viewButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        const consultationId = parseInt((e.currentTarget as HTMLElement).getAttribute('data-consultation-id') || '0');
        if (consultationId) {
          viewConsultation(consultationId);
        }
      });
    });
  }

  function viewConsultation(consultationId: number) {
    const consultation = consultations.find(c => c.id === consultationId);
    if (!consultation) return;

    // Crear modal de detalles de consulta
    const detailModal = document.createElement('div');
    detailModal.className = 'fixed z-20 inset-0 overflow-y-auto';
    detailModal.innerHTML = `
      <div class="modal-container">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <div class="modal-content bg-white dark:bg-slate-800 rounded-xl shadow-xl max-w-2xl w-full transform transition-all">
          <div class="px-6 py-4">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                Detalles de Consulta
              </h3>
              <button
                type="button"
                class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                onclick="this.closest('.fixed').remove()"
              >
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <div class="space-y-4">
              <div>
                <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Paciente</h4>
                <p class="text-sm text-gray-900 dark:text-white">${consultation.patientName}</p>
              </div>
              
              <div>
                <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Fecha de Consulta</h4>
                <p class="text-sm text-gray-900 dark:text-white">${consultation.date}</p>
              </div>
              
              <div>
                <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Síntomas</h4>
                <p class="text-sm text-gray-900 dark:text-white">${consultation.symptoms}</p>
              </div>
              
              <div>
                <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Examen Físico</h4>
                <p class="text-sm text-gray-900 dark:text-white">${consultation.examination}</p>
              </div>
              
              <div>
                <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Diagnóstico</h4>
                <p class="text-sm text-gray-900 dark:text-white">${consultation.diagnosis}</p>
              </div>
              
              <div>
                <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Tratamiento</h4>
                <p class="text-sm text-gray-900 dark:text-white">${consultation.treatment}</p>
              </div>
              
              <div>
                <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Próxima Cita</h4>
                <p class="text-sm text-gray-900 dark:text-white">${consultation.nextVisit}</p>
              </div>
              
              ${consultation.notes ? `
                <div>
                  <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300">Notas Adicionales</h4>
                  <p class="text-sm text-gray-900 dark:text-white">${consultation.notes}</p>
                </div>
              ` : ''}
            </div>
          </div>
          
          <div class="px-6 py-3 bg-gray-50 dark:bg-slate-700 flex justify-end rounded-b-xl">
            <button
              type="button"
              class="inline-flex justify-center rounded-xl border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-slate-700 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 transition-colors duration-200"
              onclick="this.closest('.fixed').remove()"
            >
              Cerrar
            </button>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(detailModal);
    
    // Cerrar modal al hacer clic fuera
    detailModal.addEventListener('click', (e) => {
      if (e.target === detailModal) {
        detailModal.remove();
      }
    });
    
    // Cerrar con Escape
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        detailModal.remove();
        document.removeEventListener('keydown', handleEscape);
      }
    };
    document.addEventListener('keydown', handleEscape);
  }

  function validateForm() {
    if (!consultationForm) return;
    
    const formData = new FormData(consultationForm);
    const submitBtn = consultationForm.querySelector('button[type="submit"]') as HTMLButtonElement;
    
    if (!submitBtn) return;
    
    // Verificar campos requeridos
    const patientId = formData.get('patientId');
    const consultationDate = formData.get('consultationDate');
    const symptoms = formData.get('symptoms');
    const examination = formData.get('examination');
    const diagnosis = formData.get('diagnosis');
    const treatment = formData.get('treatment');
    const nextVisit = formData.get('nextVisit');
    
    const isValid = patientId && 
                   consultationDate && 
                   symptoms && symptoms.toString().trim() !== '' &&
                   examination && examination.toString().trim() !== '' &&
                   diagnosis && diagnosis.toString().trim() !== '' &&
                   treatment && treatment.toString().trim() !== '' &&
                   nextVisit;
    
    // Habilitar/deshabilitar botón según validación
    submitBtn.disabled = !isValid;
    
    // Cambiar estilo del botón
    if (isValid) {
      submitBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      submitBtn.classList.add('hover:bg-orange-600');
    } else {
      submitBtn.classList.add('opacity-50', 'cursor-not-allowed');
      submitBtn.classList.remove('hover:bg-orange-600');
    }
  }

  function showNotification(message: string, type: 'success' | 'error' = 'success') {
    // Remover notificaciones existentes para evitar superposición
    const existingNotifications = document.querySelectorAll('.notification-toast');
    existingNotifications.forEach(notification => notification.remove());

    const notification = document.createElement('div');
    notification.className = `notification-toast fixed top-4 right-4 z-50 p-4 rounded-xl shadow-lg transform transition-all duration-300 translate-x-full max-w-sm ${
      type === 'success' 
        ? 'bg-green-500 text-white border-l-4 border-green-600' 
        : 'bg-red-500 text-white border-l-4 border-red-600'
    }`;
    
    const icon = type === 'success' 
      ? '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />'
      : '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />';
    
    notification.innerHTML = `
      <div class="flex items-start">
        <svg class="w-5 h-5 mr-3 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
          ${icon}
        </svg>
        <div class="flex-1">
          <p class="text-sm font-medium">${message}</p>
        </div>
        <button 
          type="button" 
          class="ml-3 text-white hover:text-gray-200 focus:outline-none"
          onclick="this.parentElement.parentElement.remove()"
        >
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // Animar entrada
    requestAnimationFrame(() => {
      notification.classList.remove('translate-x-full');
    });
    
    // Auto-remover después de 5 segundos (más tiempo para errores)
    const duration = type === 'error' ? 5000 : 3000;
    setTimeout(() => {
      if (notification.parentElement) {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
          if (notification.parentElement) {
            notification.remove();
          }
        }, 300);
      }
    }, duration);
  }

  // Event Listeners
  if (newConsultationBtn) {
    newConsultationBtn.addEventListener('click', showModal);
  }
  if (cancelConsultationBtn) {
    cancelConsultationBtn.addEventListener('click', hideModal);
  }
  if (consultationForm) {
    consultationForm.addEventListener('submit', saveConsultation);
    
    // Validación en tiempo real
    consultationForm.addEventListener('input', validateForm);
    consultationForm.addEventListener('change', validateForm);
  }
  if (patientSelect) {
    patientSelect.addEventListener('change', (e) => {
      const patientId = parseInt((e.target as HTMLSelectElement).value);
      if (patientId) {
        showPatientInfo(patientId);
      } else {
        if (patientInfo) patientInfo.classList.add('hidden');
        if (medicalHistoryDiv) medicalHistoryDiv.classList.add('hidden');
      }
      validateForm();
    });
  }

  // Cerrar modal al hacer clic fuera
  if (consultationModal) {
    consultationModal.addEventListener('click', (e) => {
      if (e.target === consultationModal) {
        hideModal();
      }
    });
  }

  // Soporte para teclado
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && consultationModal && !consultationModal.classList.contains('hidden')) {
      hideModal();
    }
  });

  // Inicialización
  // Verificar que los elementos críticos estén disponibles
  if (!newConsultationBtn) {
    console.error('newConsultationBtn element not found');
  }
  if (!consultationModal) {
    console.error('consultationModal element not found');
  }
  if (!consultationForm) {
    console.error('consultationForm element not found');
  }
  if (!consultationsList) {
    console.error('consultationsList element not found');
  }
  
  populatePatientSelect();
  renderConsultations();
</script> 